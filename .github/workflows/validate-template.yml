name: KickStartMyAI Template Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_full_validation:
        description: 'Run full validation (including functionality tests)'
        required: false
        default: 'true'
        type: boolean

jobs:
  validate-template:
    name: Validate Template (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix on PR to save resources
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest  
            python-version: '3.9'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install postgresql
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cookiecutter
        pip install requests
        pip install -e .
    
    - name: Install Docker (if needed)
      if: matrix.os == 'ubuntu-latest'
      uses: docker/setup-buildx-action@v2
    
    - name: Run package installation validation
      run: |
        python validate_production.py --verbose
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run template generation validation
      run: |
        python -c "
        from validate_production import KickStartMyAIValidator
        validator = KickStartMyAIValidator(verbose=True)
        success = validator.validate_template_generation()
        exit(0 if success else 1)
        "
    
    - name: Run full functionality validation
      if: ${{ github.event.inputs.run_full_validation == 'true' || github.event_name == 'schedule' || github.ref == 'refs/heads/main' }}
      run: |
        python validate_production.py --verbose
      env:
        PYTHONPATH: ${{ github.workspace }}
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
    
    - name: Upload validation logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: validation-logs-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          *.log
          /tmp/kickstartmyai-*
        retention-days: 7

  test-generated-projects:
    name: Test Generated Projects
    runs-on: ubuntu-latest
    needs: validate-template
    
    strategy:
      matrix:
        config: [minimal, full]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cookiecutter
        pip install -e .
    
    - name: Generate test project (${{ matrix.config }})
      run: |
        # Create config file
        cat > cookiecutter_config.json << EOF
        {
          "project_name": "Test Project ${{ matrix.config }}",
          "project_slug": "test_project_${{ matrix.config }}",
          "project_description": "A test project for validation",
          "author_name": "Test Author",
          "author_email": "test@example.com", 
          "version": "0.1.0",
          "include_docker": "${{ matrix.config == 'full' && 'y' || 'n' }}",
          "include_redis": "${{ matrix.config == 'full' && 'y' || 'n' }}",
          "database_type": "${{ matrix.config == 'full' && 'postgresql' || 'sqlite' }}"
        }
        EOF
        
        # Generate project
        cookiecutter kickstartmyai/templates --config-file cookiecutter_config.json --no-input
    
    - name: Test generated project
      run: |
        cd "test_project_${{ matrix.config }}"
        
        # Create virtual environment
        python -m venv .venv
        source .venv/bin/activate
        
        # Install dependencies
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
        # Run linting
        make lint || true  # Don't fail on linting errors
        
        # Run tests
        make test
        
        # Test application startup
        timeout 30s python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/health
        pkill -f uvicorn

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -e .
    
    - name: Run Bandit security scan
      run: |
        bandit -r kickstartmyai/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  validate-documentation:
    name: Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cookiecutter
        pip install -e .
    
    - name: Generate project for docs testing
      run: |
        cat > cookiecutter_config.json << EOF
        {
          "project_name": "Documentation Test Project",
          "project_slug": "docs_test_project",
          "project_description": "Testing documentation accuracy",
          "author_name": "Test Author",
          "author_email": "test@example.com",
          "version": "0.1.0",
          "include_docker": "y",
          "include_redis": "y",
          "database_type": "postgresql"
        }
        EOF
        
        cookiecutter kickstartmyai/templates --config-file cookiecutter_config.json --no-input
    
    - name: Validate README instructions
      run: |
        cd docs_test_project
        
        # Test that all commands in README work
        python -m venv .venv
        source .venv/bin/activate
        
        # Follow README setup instructions
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
        # Test make commands exist
        make help
        make lint || true
        make test
    
    - name: Check documentation completeness
      run: |
        cd docs_test_project
        
        # Verify key documentation files exist
        test -f README.md
        test -f docs/api/README.md
        test -f docs/development/README.md
        test -f docs/deployment/README.md
        
        # Check for TODO or placeholder content
        ! grep -r "TODO\|FIXME\|XXX\|PLACEHOLDER" docs/ README.md || true

  publish-validation-report:
    name: Publish Validation Report
    runs-on: ubuntu-latest
    needs: [validate-template, test-generated-projects, security-scan, validate-documentation]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate validation report
      run: |
        cat > validation-report.md << EOF
        # KickStartMyAI Validation Report
        
        **Date:** $(date -u)
        **Workflow:** ${{ github.workflow }}
        **Run ID:** ${{ github.run_id }}
        
        ## Summary
        
        - **Template Validation:** ${{ needs.validate-template.result }}
        - **Generated Projects:** ${{ needs.test-generated-projects.result }}
        - **Security Scanning:** ${{ needs.security-scan.result }}
        - **Documentation:** ${{ needs.validate-documentation.result }}
        
        ## Details
        
        ### Template Validation
        Status: ${{ needs.validate-template.result }}
        
        ### Generated Projects Test
        Status: ${{ needs.test-generated-projects.result }}
        
        ### Security Scanning
        Status: ${{ needs.security-scan.result }}
        
        ### Documentation Validation
        Status: ${{ needs.validate-documentation.result }}
        
        ## Artifacts
        
        - Validation logs and reports are available as workflow artifacts
        - Security scan results available for 30 days
        - Test project outputs available for 7 days
        
        ---
        Generated by GitHub Actions
        EOF
    
    - name: Upload validation report
      uses: actions/upload-artifact@v3
      with:
        name: validation-report
        path: validation-report.md
        retention-days: 30
