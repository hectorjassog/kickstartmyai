name: KickStartMyAI Template Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_full_validation:
        description: 'Run full validation (including functionality tests)'
        required: false
        default: true
        type: boolean

jobs:
  # Cross-platform basic validation (no services)
  validate-cross-platform:
    name: Basic Validation (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix on PR to save resources
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest  
            python-version: '3.9'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install postgresql
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cookiecutter
        pip install requests
        pip install -e .
    
    - name: Test basic template generation
      run: |
        # Create config file for basic test (cross-platform compatible)
        python -c "import json; config={'project_name': 'Test Project Basic', 'project_description': 'A basic test project', 'author_name': 'Test Author', 'author_email': 'test@example.com', 'version': '0.1.0', 'database_type': 'sqlite', 'include_openai': 'n', 'include_anthropic': 'n', 'include_gemini': 'n', 'include_redis': 'n', 'include_monitoring': 'n', 'include_load_testing': 'n', 'use_https': 'n'}; json.dump(config, open('cookiecutter_config.json', 'w'), indent=2)"
        
        # Generate project
        cookiecutter ./kickstartmyai/templates --config-file cookiecutter_config.json --no-input
        
        # Find and validate the generated project directory (cross-platform)
        python -c "
        import os
        import sys
        exclude = {'.', '..', '.git', '.github', '.claude', 'kickstartmyai', 'deprecated', 'docs', 'sandbox', 'kickstartmyai.egg-info'}
        candidates = [item for item in os.listdir('.') if item not in exclude and not item.startswith('.') and not any(item.endswith(ext) for ext in ['.json', '.txt', '.md', '.toml', '.py']) and os.path.isdir(item) and any(os.path.exists(os.path.join(item, f)) for f in ['README.md', 'requirements.txt', 'app'])]
        
        if not candidates:
            print('No generated project directory found!')
            print('Available directories:')
            for item in os.listdir('.'):
                if os.path.isdir(item):
                    print(f'  {item}')
            sys.exit(1)
        
        project_slug = candidates[0]
        print(f'Found created project: {project_slug}')
        
        # Verify project structure
        required_files = [
            os.path.join(project_slug, 'README.md'),
            os.path.join(project_slug, 'requirements.txt'), 
            os.path.join(project_slug, 'app', 'main.py')
        ]
        
        for file_path in required_files:
            if not os.path.exists(file_path):
                print(f'ERROR: Required file missing: {file_path}')
                sys.exit(1)
        
        print('✅ All required files found')
        print(f'Project contents:')
        for item in os.listdir(project_slug):
            print(f'  {item}')
        
        # Save project name for subsequent steps
        with open('project_name.txt', 'w') as f:
            f.write(project_slug)
        "
    
    - name: Upload validation logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-logs-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          *.log
          */
        retention-days: 7

  # Linux-specific validation with services
  validate-linux-with-services:
    name: Linux Validation with Services (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.11', '3.12']
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client redis-tools
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cookiecutter
        pip install requests
        pip install -e .
    
    - name: Test services connectivity
      run: |
        # Test PostgreSQL connection
        pg_isready -h localhost -p 5432
        PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d test_db -c "SELECT version();"
        
        # Test Redis connection
        redis-cli -h localhost -p 6379 ping
    
    - name: Generate full-featured project
      run: |
        # Create config file for full test
        python -c "import json; config={'project_name': 'Full Test Project', 'project_description': 'A full-featured test project', 'author_name': 'Test Author', 'author_email': 'test@example.com', 'version': '0.1.0', 'database_type': 'postgresql', 'include_openai': 'y', 'include_anthropic': 'y', 'include_gemini': 'n', 'include_redis': 'y', 'include_monitoring': 'y', 'include_load_testing': 'n', 'use_https': 'n'}; json.dump(config, open('cookiecutter_config.json', 'w'), indent=2)"
        
        # Generate project
        cookiecutter ./kickstartmyai/templates --config-file cookiecutter_config.json --no-input
        
        # Find and validate the generated project directory
        python -c "
        import os
        import sys
        exclude = {'.', '..', '.git', '.github', '.claude', 'kickstartmyai', 'deprecated', 'docs', 'sandbox', 'kickstartmyai.egg-info'}
        candidates = [item for item in os.listdir('.') if item not in exclude and not item.startswith('.') and not any(item.endswith(ext) for ext in ['.json', '.txt', '.md', '.toml', '.py']) and os.path.isdir(item) and any(os.path.exists(os.path.join(item, f)) for f in ['README.md', 'requirements.txt', 'app'])]
        
        if not candidates:
            print('ERROR: No generated project directory found!')
            sys.exit(1)
        
        project_slug = candidates[0]
        print(f'Found created project: {project_slug}')
        
        # Verify project structure for full-featured project
        required_files = [
            os.path.join(project_slug, 'README.md'),
            os.path.join(project_slug, 'requirements.txt'),
            os.path.join(project_slug, 'app', 'main.py'),
            os.path.join(project_slug, 'docker-compose.yml'),
            os.path.join(project_slug, 'Dockerfile')
        ]
        
        for file_path in required_files:
            if not os.path.exists(file_path):
                print(f'ERROR: Required file missing: {file_path}')
                sys.exit(1)
        
        print('✅ All required files found')
        
        # Save project name for subsequent steps
        with open('project_name.txt', 'w') as f:
            f.write(project_slug)
        "
    
    - name: Test generated project 
      run: |
        # Get project name and test it
        python -c "
        with open('project_name.txt', 'r') as f: 
            project_slug = f.read().strip()
        print('PROJECT_SLUG=' + project_slug)
        " > project_vars.txt
        
        # Source the project name (cross-platform)
        python -c "
        import os
        import sys
        import subprocess
        
        # Read project name
        with open('project_name.txt', 'r') as f:
            project_slug = f.read().strip()
        
        print(f'Testing project: {project_slug}')
        os.chdir(project_slug)
        
        # Create .env file with required variables
        with open('.env', 'w') as f:
            f.write('SECRET_KEY=test-secret-key-for-validation\\n')
            f.write('DATABASE_URL=sqlite:///./test.db\\n')
            f.write('REDIS_URL=redis://localhost:6379\\n')
        
        # Create and activate virtual environment
        subprocess.run([sys.executable, '-m', 'venv', '.venv'], check=True)
        
        # Get cross-platform paths
        if os.name == 'nt':
            pip_exe = os.path.join('.venv', 'Scripts', 'pip.exe')
            python_exe = os.path.join('.venv', 'Scripts', 'python.exe')
        else:
            pip_exe = os.path.join('.venv', 'bin', 'pip')
            python_exe = os.path.join('.venv', 'bin', 'python')
        
        # Install dependencies
        print('Installing dependencies...')
        result = subprocess.run([pip_exe, 'install', '-r', 'requirements.txt'], capture_output=True, text=True)
        if result.returncode != 0:
            print('Install failed:', result.stderr)
            sys.exit(1)
        
        # Test basic import with environment variables
        print('Testing app import...')
        env = os.environ.copy()
        env['SECRET_KEY'] = 'test-secret-key-for-validation'
        env['DATABASE_URL'] = 'sqlite:///./test.db'
        
        result = subprocess.run([python_exe, '-c', 'from app.main import app; print(\"✅ App imported successfully\")'], env=env, capture_output=True, text=True)
        print(result.stdout)
        if result.returncode != 0:
            print('Import test failed:', result.stderr)
            sys.exit(1)
        
        print('✅ Project test completed successfully')
        "
    
    - name: Upload full project
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: full-project-py${{ matrix.python-version }}
        path: |
          */
        retention-days: 7

  test-generated-projects:
    name: Test Generated Projects
    runs-on: ubuntu-latest
    needs: validate-cross-platform
    
    strategy:
      matrix:
        config: [minimal, full]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cookiecutter
        pip install -e .
    
    - name: Generate test project (${{ matrix.config }})
      run: |
        # Create config file
        if [ "${{ matrix.config }}" == "minimal" ]; then
          python -c "import json; config={'project_name': 'Test Project Minimal', 'project_description': 'A minimal test project for validation', 'author_name': 'Test Author', 'author_email': 'test@example.com', 'version': '0.1.0', 'database_type': 'sqlite', 'include_openai': 'n', 'include_anthropic': 'n', 'include_gemini': 'n', 'include_redis': 'n', 'include_monitoring': 'n', 'include_load_testing': 'n', 'use_https': 'n'}; json.dump(config, open('cookiecutter_config.json', 'w'), indent=2)"
        else
          python -c "import json; config={'project_name': 'Test Project Full', 'project_description': 'A full test project for validation', 'author_name': 'Test Author', 'author_email': 'test@example.com', 'version': '0.1.0', 'database_type': 'postgresql', 'include_openai': 'y', 'include_anthropic': 'y', 'include_gemini': 'n', 'include_redis': 'y', 'include_monitoring': 'y', 'include_load_testing': 'n', 'use_https': 'n'}; json.dump(config, open('cookiecutter_config.json', 'w'), indent=2)"
        fi
        
        # Generate project
        cookiecutter ./kickstartmyai/templates --config-file cookiecutter_config.json --no-input
    
    - name: Test generated project structure
      run: |
        # Find and test the generated project directory (cross-platform)
        python -c "
        import os
        import sys
        import subprocess
        
        # Find project directory
        exclude = {'.', '..', '.git', '.github', '.claude', 'kickstartmyai', 'deprecated', 'docs', 'sandbox', 'kickstartmyai.egg-info'}
        candidates = [item for item in os.listdir('.') if item not in exclude and not item.startswith('.') and not any(item.endswith(ext) for ext in ['.json', '.txt', '.md', '.toml', '.py']) and os.path.isdir(item) and any(os.path.exists(os.path.join(item, f)) for f in ['README.md', 'requirements.txt', 'app'])]
        
        if not candidates:
            print('ERROR: No generated project directory found!')
            sys.exit(1)
        
        project_slug = candidates[0]
        print(f'Testing project: {project_slug}')
        os.chdir(project_slug)
        
        # Verify basic structure
        required_files = ['README.md', 'requirements.txt', 'app/main.py', 'Makefile']
        for file_path in required_files:
            if not os.path.exists(file_path):
                print(f'ERROR: Required file missing: {file_path}')
                sys.exit(1)
        
        # Create .env file for testing
        with open('.env', 'w') as f:
            f.write('SECRET_KEY=test-secret-key\\n')
            f.write('DATABASE_URL=sqlite:///./test.db\\n')
        
        # Create virtual environment
        subprocess.run([sys.executable, '-m', 'venv', '.venv'], check=True)
        
        # Cross-platform paths
        if os.name == 'nt':
            pip_exe = os.path.join('.venv', 'Scripts', 'pip.exe')
            python_exe = os.path.join('.venv', 'Scripts', 'python.exe')
        else:
            pip_exe = os.path.join('.venv', 'bin', 'pip')
            python_exe = os.path.join('.venv', 'bin', 'python')
        
        # Install dependencies
        subprocess.run([pip_exe, 'install', '-r', 'requirements.txt'], check=True)
        
        # Test basic import with environment
        env = os.environ.copy()
        env['SECRET_KEY'] = 'test-secret-key'
        env['DATABASE_URL'] = 'sqlite:///./test.db'
        
        result = subprocess.run([python_exe, '-c', 'from app.main import app; print(\"✅ App imported successfully\")'], env=env, capture_output=True, text=True)
        print(result.stdout)
        if result.returncode != 0:
            print('Import failed:', result.stderr)
            sys.exit(1)
        "

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -e .
    
    - name: Run Bandit security scan
      run: |
        bandit -r kickstartmyai/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  validate-documentation:
    name: Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cookiecutter
        pip install -e .
    
    - name: Generate project for docs testing
      run: |
        python -c "import json; config={'project_name': 'Documentation Test Project', 'project_description': 'Testing documentation accuracy', 'author_name': 'Test Author', 'author_email': 'test@example.com', 'version': '0.1.0', 'database_type': 'postgresql', 'include_openai': 'y', 'include_anthropic': 'n', 'include_gemini': 'n', 'include_redis': 'y', 'include_monitoring': 'y', 'include_load_testing': 'n', 'use_https': 'n'}; json.dump(config, open('cookiecutter_config.json', 'w'), indent=2)"
        
        cookiecutter ./kickstartmyai/templates --config-file cookiecutter_config.json --no-input
    
    - name: Validate README instructions
      run: |
        # Find and validate the generated project directory (cross-platform)
        python -c "
        import os
        import sys
        import subprocess
        
        # Find project directory
        exclude = {'.', '..', '.git', '.github', '.claude', 'kickstartmyai', 'deprecated', 'docs', 'sandbox', 'kickstartmyai.egg-info'}
        candidates = [item for item in os.listdir('.') if item not in exclude and not item.startswith('.') and not any(item.endswith(ext) for ext in ['.json', '.txt', '.md', '.toml', '.py']) and os.path.isdir(item) and any(os.path.exists(os.path.join(item, f)) for f in ['README.md', 'requirements.txt', 'app'])]
        
        if not candidates:
            print('ERROR: No generated project directory found!')
            sys.exit(1)
        
        project_slug = candidates[0]
        print(f'Testing project: {project_slug}')
        os.chdir(project_slug)
        
        # Verify required files exist
        required_files = ['README.md', 'requirements.txt', 'app/main.py']
        for file_path in required_files:
            if not os.path.exists(file_path):
                print(f'ERROR: Required file missing: {file_path}')
                sys.exit(1)
        
        # Create .env file for testing
        with open('.env', 'w') as f:
            f.write('SECRET_KEY=test-secret-key\\n')
            f.write('DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db\\n')
            f.write('REDIS_URL=redis://localhost:6379\\n')
        
        # Create virtual environment and test README instructions
        subprocess.run([sys.executable, '-m', 'venv', '.venv'], check=True)
        
        # Cross-platform paths
        if os.name == 'nt':
            pip_exe = os.path.join('.venv', 'Scripts', 'pip.exe')
            python_exe = os.path.join('.venv', 'Scripts', 'python.exe')
        else:
            pip_exe = os.path.join('.venv', 'bin', 'pip')
            python_exe = os.path.join('.venv', 'bin', 'python')
        
        # Install dependencies per README
        subprocess.run([pip_exe, 'install', '-r', 'requirements.txt'], check=True)
        
        # Test basic functionality with environment
        env = os.environ.copy()
        env['SECRET_KEY'] = 'test-secret-key'
        env['DATABASE_URL'] = 'postgresql://postgres:postgres@localhost:5432/test_db'
        env['REDIS_URL'] = 'redis://localhost:6379'
        
        result = subprocess.run([python_exe, '-c', 'from app.main import app; print(\"✅ Documentation test passed\")'], env=env, capture_output=True, text=True)
        print(result.stdout)
        if result.returncode != 0:
            print('Documentation test failed:', result.stderr)
            sys.exit(1)
        "
    
    - name: Check documentation completeness
      run: |
        # Find the generated project directory and check documentation (cross-platform)
        python -c "
        import os
        import sys
        
        # Find project directory
        exclude = {'.', '..', '.git', '.github', '.claude', 'kickstartmyai', 'deprecated', 'docs', 'sandbox', 'kickstartmyai.egg-info'}  
        candidates = [item for item in os.listdir('.') if item not in exclude and not item.startswith('.') and not any(item.endswith(ext) for ext in ['.json', '.txt', '.md', '.toml', '.py']) and os.path.isdir(item) and any(os.path.exists(os.path.join(item, f)) for f in ['README.md', 'requirements.txt', 'app'])]
        
        if not candidates:
            print('ERROR: No generated project directory found!')
            sys.exit(1)
        
        project_slug = candidates[0]
        print(f'Checking documentation in project: {project_slug}')
        os.chdir(project_slug)
        
        # Verify key files exist
        if not os.path.exists('README.md'):
            print('ERROR: README.md not found')
            sys.exit(1)
        
        # Check for basic content in README
        with open('README.md', 'r') as f:
            readme_content = f.read()
        
        sections_to_check = ['Installation', 'Usage']
        missing_sections = []
        
        for section in sections_to_check:
            if section not in readme_content:
                missing_sections.append(section)
        
        if missing_sections:
            for section in missing_sections:
                print(f'WARNING: Missing {section} section in README')
        else:
            print('✅ All required documentation sections found')
        "

  publish-validation-report:
    name: Publish Validation Report
    runs-on: ubuntu-latest
    needs: [validate-cross-platform, validate-linux-with-services, test-generated-projects, security-scan, validate-documentation]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate validation report
      run: |
        python -c "from datetime import datetime; report='# KickStartMyAI Validation Report\n\n**Date:** ' + datetime.utcnow().isoformat() + 'Z\n**Workflow:** ${{ github.workflow }}\n**Run ID:** ${{ github.run_id }}\n\n## Summary\n\n- **Cross-Platform Validation:** ${{ needs.validate-cross-platform.result }}\n- **Linux with Services:** ${{ needs.validate-linux-with-services.result }}\n- **Generated Projects:** ${{ needs.test-generated-projects.result }}\n- **Security Scanning:** ${{ needs.security-scan.result }}\n- **Documentation:** ${{ needs.validate-documentation.result }}\n\n## Details\n\n### Cross-Platform Validation\nStatus: ${{ needs.validate-cross-platform.result }}\n\n### Linux with Services\nStatus: ${{ needs.validate-linux-with-services.result }}\n\n### Generated Projects Test\nStatus: ${{ needs.test-generated-projects.result }}\n\n### Security Scanning\nStatus: ${{ needs.security-scan.result }}\n\n### Documentation Validation\nStatus: ${{ needs.validate-documentation.result }}\n\n## Artifacts\n\n- Validation logs and reports are available as workflow artifacts\n- Security scan results available for 30 days\n- Test project outputs available for 7 days\n\n---\nGenerated by GitHub Actions'; open('validation-report.md', 'w').write(report)"
    
    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: validation-report
        path: validation-report.md
        retention-days: 30
