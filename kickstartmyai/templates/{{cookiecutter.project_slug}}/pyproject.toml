# {{cookiecutter.project_name}} - Python Project Configuration

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{cookiecutter.project_slug}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_description}}"
authors = [
    {name = "{{cookiecutter.author_name}}", email = "{{cookiecutter.author_email}}"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

# Core dependencies - minimal set for basic functionality
dependencies = [
    "fastapi==0.115.12",
    "uvicorn[standard]==0.34.3",
    "sqlalchemy==2.0.41", 
    "alembic==1.16.1",
{% if cookiecutter.database_type == "postgresql" %}
    "asyncpg==0.30.0",
    "psycopg2-binary==2.9.10",
{% elif cookiecutter.database_type == "mysql" %}
    "PyMySQL==1.1.1",
    "aiomysql==0.2.0",
{% endif %}
    "pydantic[email]==2.11.5",
    "pydantic-settings==2.9.1",
    "aiofiles==24.1.0",
    "numpy==2.0.2",
    "python-dotenv==1.1.0",
    "typer==0.12.5",
    "rich==13.9.4",
    "boto3==1.38.33",
    "setuptools>=65.0.0",
    "httpx==0.28.1",
    "python-jose[cryptography]==3.5.0",
    "python-multipart==0.0.20",
    "passlib[bcrypt]==1.7.4",
    "greenlet==3.2.3",
]

[project.optional-dependencies]
# AI Provider dependencies
{% if cookiecutter.include_openai == "y" %}
openai = [
    "openai==1.85.0",
]
{% endif %}

{% if cookiecutter.include_anthropic == "y" %}
anthropic = [
    "anthropic==0.53.0",
]
{% endif %}

{% if cookiecutter.include_gemini == "y" %}
gemini = [
    "google-generativeai==0.7.2",
]
{% endif %}

# Redis dependencies
{% if cookiecutter.include_redis == "y" %}
redis = [
    "redis==6.2.0",
]
{% endif %}

# Monitoring dependencies  
{% if cookiecutter.include_monitoring == "y" %}
monitoring = [
    "sentry-sdk[fastapi]==2.29.1",
    "structlog==25.4.0",
]
{% endif %}

# Development dependencies
dev = [
    "pytest==8.3.3",
    "pytest-asyncio==0.24.0", 
    "pytest-cov==6.0.0",
    "black==24.10.0",
    "isort==5.13.2",
    "flake8==7.1.1",
    "mypy==1.13.0",
    "pre-commit==4.0.1",
]

# Testing dependencies
test = [
    "pytest==8.3.3",
    "pytest-asyncio==0.24.0",
    "pytest-cov==6.0.0",
    "httpx==0.28.1",
    "faker==33.1.0",
]

# Documentation dependencies
docs = [
    "mkdocs==1.6.1",
    "mkdocs-material==9.5.50",
    "mkdocstrings==0.27.2",
]

[project.scripts]
{{cookiecutter.project_slug}} = "app.main:app"

[tool.hatch.version]
path = "app/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
implicit_reexport = false
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
