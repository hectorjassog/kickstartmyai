name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up environment variables
      run: |
        cp .env.example .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
        echo "ENVIRONMENT=testing" >> .env
        echo "OPENAI_API_KEY=test-key" >> .env
        echo "ANTHROPIC_API_KEY=test-key" >> .env
        echo "GEMINI_API_KEY=test-key" >> .env

    - name: Run database migrations
      run: |
        alembic upgrade head

    - name: Run linting
      run: |
        flake8 app tests
        black --check app tests
        isort --check-only app tests

    - name: Run type checking
      run: |
        mypy app

    - name: Run security checks
      run: |
        bandit -r app -ll
        safety check

    - name: Run unit tests
      run: |
        pytest tests/unit -v --cov=app --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        pytest tests/integration -v --cov=app --cov-append --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-ai-providers:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Test AI providers (with real API keys)
      if: ${{ secrets.OPENAI_API_KEY && secrets.ANTHROPIC_API_KEY && secrets.GEMINI_API_KEY }}
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        SECRET_KEY: test-secret-key
        DATABASE_URL: sqlite:///test.db
        ENVIRONMENT: testing
      run: |
        pytest tests/integration/test_ai_providers_real.py -v -m "not slow"

  docker-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t {{cookiecutter.project_slug}}:test .

    - name: Test Docker container
      run: |
        docker run --rm {{cookiecutter.project_slug}}:test python -c "
        from app.main import app
        from app.core.config import settings
        print('Docker container test passed')
        " 