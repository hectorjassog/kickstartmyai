name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        pip install -r requirements.txt

    - name: Run Safety Check
      run: |
        safety scan --json --output security-report.json || true
        cat security-report.json

    - name: Run Bandit Security Scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        cat bandit-report.json

    - name: Run Semgrep Security Scan
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      run: |
        semgrep --config=auto --json --output=semgrep-report.json app/ || true

    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          security-report.json
          bandit-report.json
          semgrep-report.json

    - name: Comment PR with Security Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## ðŸ”’ Security Scan Results\n\n';
          
          // Safety results
          try {
            const safetyReport = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
            const vulnCount = safetyReport.report_meta?.vulnerabilities_found || 0;
            comment += `**Safety Vulnerability Scan**: ${vulnCount} vulnerabilities found\n`;
          } catch (e) {
            comment += '**Safety Vulnerability Scan**: Report not available\n';
          }
          
          // Bandit results
          try {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            const issues = banditReport.results?.length || 0;
            comment += `**Bandit Code Security**: ${issues} potential issues found\n`;
          } catch (e) {
            comment += '**Bandit Code Security**: Report not available\n';
          }
          
          comment += '\nðŸ“Š Full security reports available in workflow artifacts.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC